#!/bin/zsh

{{ if eq .chezmoi.os "darwin" }}
echo "macos script running"

# Packages to install
PACKAGES=(
  "eza"      # ls replacement
  "htop"     # process viewer
  "neovim"   # vim replacement
  "zellij"   # tmux replacement
  "ripgrep"  # grep replacement
  "fd"       # find replacement
  "bat"      # cat replacement
  "uv"       # python package manager
  "rust"     # rust
  "zoxide"   # cd replacement
  "yazi"     # file manager
  "ImageMagick" # image processing
  "mise"        # multiple package manager
)
{{ else }}
echo "linux script running"

# Install Nix package manager if not already installed
if ! command -v nix &> /dev/null; then
    printf '\n\e[33mNix not found. \e[0mInstalling Nix package manager...'
    # Install Nix with daemon mode for multi-user installation
    curl -L https://nixos.org/nix/install | sh -s -- --daemon
    
    # Source nix profile
    if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
        . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    fi
    
    # Enable flakes and nix-command (experimental features)
    mkdir -p ~/.config/nix
    echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
else
    printf '\n\e[0mNix found. \e[0mContinuing...'
    # Source nix profile if available
    if [ -e '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' ]; then
        . '/nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh'
    fi
fi

# Function to install packages with Nix
install_nix_package() {
    local package=$1
    if ! command -v $package &> /dev/null; then
        printf "\n\e[33m$package \e[0mnot found. \e[0mInstalling with Nix..."
        nix-env -iA nixpkgs.$package
    else
        printf "\n\e[0m$package \e[0mfound. \e[0mContinuing..."
    fi
}

# Define Nix packages to install
NIX_PACKAGES=(
    "gcc"           # build-essential equivalent
    "gnumake"       # make
    "cmake"         # cmake
    "htop"          # process viewer
    "neovim"        # vim replacement
    "ripgrep"       # grep replacement
    "fd"            # find replacement
    "bat"           # cat replacement
    "eza"           # ls replacement
    "zellij"        # tmux replacement
    "zoxide"        # cd replacement
    "yazi"          # file manager
    "rustc"         # rust compiler
    "cargo"         # rust package manager
    "python3"       # python
    "imagemagick"   # image processing
    "mise"          # multiple package manager
)

printf '\n\e[33mInstalling packages with Nix...\e[0m'

# Install packages using Nix
for package in "${NIX_PACKAGES[@]}"; do
    install_nix_package $package
done

# Install uv (python package manager) - not available in nixpkgs stable yet
if ! command -v uv &> /dev/null; then
    printf '\n\e[33muv \e[0mnot found. \e[0mInstalling with curl...'
    curl -LsSf https://astral.sh/uv/install.sh | sh
else
    printf '\n\e[0muv \e[0mfound. \e[0mContinuing...'
fi

{{ end }}

{{ if eq .chezmoi.os "darwin" }}
CASK_PACKAGES=(
  # hiddenbar
)
# If Homebrew is not installed on the system, it will be installed here
if test ! $(which brew); then
   printf '\e[33mHomebrew not found. \e[0mInstalling Homebrew...'
   /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
else
  printf '\e[0mHomebrew found. Continuing...'
fi

printf '\n\e[33mInstalling brew packages...\e[0m'
# Get all installed packages once
INSTALLED_PACKAGES=($(brew list))

for package in "${PACKAGES[@]}"; do
  if [[ " ${INSTALLED_PACKAGES[@]} " =~ " ${package} " ]]; then
    printf "\n\e[0m$package \e[0mfound. \e[0mContinuing..."
  else
    printf "\n\e[33m$package \e[0mnot found. \e[0mInstalling..."
    brew install $package
  fi
done


printf '\n\e[33mInstalling cask apps...\e[0m'
for cask in "${CASK_PACKAGES[@]}"; do
  if ! brew list --cask $cask &> /dev/null; then
    printf "\n\e[33m$cask \e[0mnot found. \e[0mInstalling..."
    brew install --cask $cask
  else
    printf "\n\e[0m$cask \e[0mfound. \e[0mContinuing..."
  fi
done

{{ end }}

printf '\n\e[33mInstalling common packages for all systems...\e[0m'

# If Oh-my-zsh is not installed on the system, it will be installed here
if [ ! -d $HOME/.oh-my-zsh ]; then
  printf '\n\e[33mOh-my-zsh not found. \e[0mInstalling Oh-my-zsh...'
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
else
  printf '\n\e[0mOh-my-zsh found. Continuing...'
fi

# zsh-autosuggetions
if [ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
else
  printf '\n\e[0mzsh-autosuggetions found. Continuing...'
fi

# zsh-syntax-highlighting
if [ ! -d $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
else
  printf '\n\e[0mzsh-syntax-highlighting found. Continuing...'
fi

# powerlevel10k
if [ ! -d $HOME/.oh-my-zsh/custom/themes/powerlevel10k ]; then
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
else
  printf '\n\e[0mpowerlevel10k found. Continuing...'
fi

# fzf
if [ ! -d $HOME/.fzf ]; then
    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install
else
  printf '\n\e[0mfzf found. Continuing...'
fi

# bun
if [ ! -d $HOME/.bun ]; then
    curl -fsSL https://bun.sh/install | bash
else
  printf '\n\e[0mbun found. Continuing...'
fi

# bun completions
[ -s "{{ .chezmoi.homeDir }}/.bun/_bun" ] && source "{{ .chezmoi.homeDir }}/.bun/_bun"
